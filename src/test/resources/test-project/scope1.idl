/*
 * Copyright 2016-2017 The Reaktivity Project
 *
 * The Reaktivity Project licenses this file to you under the Apache License,
 * version 2.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at:
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */
scope scope1
{
    struct Flat
    {
        uint8 fixed1;
        uint16 fixed2 = 222;
        string string1;
        int32 fixed3 = 333;
        string string2;
    }

    struct Nested
    {
        uint64 fixed4 = 444;
        scope1::Flat flat;
        int64 fixed5;
    }

    struct FlatWithList
    {
        uint64 fixed1 = 111;
        string string1;
        list<string> list1;
    }

    struct FlatWithOctets
    {
        uint16 fixed1 = 11;
        octets[10] octets1;
        string string1;
        octets[fixed1] octets2;
        octets extension;
    }

    struct Integers
    {
        uint8  unsigned8  = 0xFF;
        uint16 unsigned16 = 0xFFFF;
        uint32 unsigned32 = 0x7FFFFFFF; // TODO: 0xFFFFFFFF;
        uint64 unsigned64 = 0x7FFFFFFF; // TODO: 0xFFFFFFFFFFFFFFFF;
        int8  signed8  =  -8;
        int16 signed16 = -16;
        int32 signed32 = -32;
        int64 signed64 = -64;
    }

/*
    struct NestedAllDefaulting
    {
        uint8 fixed1 = 11;
        Integers integers;
    }
*/
}
